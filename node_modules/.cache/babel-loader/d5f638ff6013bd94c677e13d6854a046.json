{"ast":null,"code":"import { bubbleSort } from \"./mergesort\";\nexport function djikstra(map, start, finish) {\n  // return map;\n  let v = {\n    \"y\": \"\",\n    \"list_variable\": []\n  };\n  let result = [];\n  let l = [];\n\n  for (let variable of map) {\n    if (variable.city_name == start) {\n      v.y = {\n        \"variable_name\": variable.city_name,\n        \"value\": 0,\n        \"route\": [variable.city_name],\n        \"neighbor_cities\": variable.neighbor_cities\n      };\n      l.push(variable.city_name);\n    } else {\n      v.list_variable.push({\n        \"variable_name\": variable.city_name,\n        \"value\": 91919191919,\n        \"route\": [],\n        \"neighbor_cities\": variable.neighbor_cities\n      });\n    }\n  } // var index = 1;\n\n\n  while (!l.includes(finish)) {\n    // for (let index = 0; index < 3; index++) {\n    // console.log(\"iterasi \" +index  )\n    // index++;\n    for (let variable of v.list_variable) {\n      if (!l.includes(variable.variable_name) && !v.y.route.includes(variable.variable_name)) {\n        let w = 91919191919;\n\n        for (let city of v.y.neighbor_cities) {\n          if (city.city_name == variable.variable_name && city.is_active == true) {\n            w = city.distance;\n            break;\n          }\n        }\n\n        console.log(\"city = \" + v.y.variable_name + \"->\" + variable.variable_name + \" value : \" + variable.value); // variable.value = Math.min(variable.value,( v.y.value +  w))\n\n        if (variable.value == 91919191919 && w == 91919191919) {} else if (variable.value >= v.y.value + w) {\n          variable.value = v.y.value + w;\n          variable.route = [];\n\n          for (let node of v.y.route) {\n            variable.route.push(node);\n          }\n\n          variable.route.push(variable.variable_name);\n\n          if (variable.route[variable.route.length - 1] == finish) {\n            let route = \"\";\n\n            for (let node of variable.route) {\n              route += node + \"-\";\n            }\n\n            result.push({\n              \"route\": route.slice(0, -1),\n              \"distance\": variable.value\n            });\n          }\n        }\n      }\n    }\n\n    v.list_variable = bubbleSort(v.list_variable);\n    v.y = v.list_variable[0];\n    l.push(v.list_variable[0].variable_name);\n    v.list_variable.shift(); // console.log(v)\n  } // return v;\n\n\n  result = result.reverse();\n  return result; // return [result[0]];\n}","map":{"version":3,"names":["bubbleSort","djikstra","map","start","finish","v","result","l","variable","city_name","y","neighbor_cities","push","list_variable","includes","variable_name","route","w","city","is_active","distance","console","log","value","node","length","slice","shift","reverse"],"sources":["/Users/hilmi/Documents/React JS/djikstra/src/controller/djikstra.js"],"sourcesContent":["import {bubbleSort} from \"./mergesort\"\nexport function djikstra(map,start,finish){\n  // return map;\n  let v = {\n    \"y\" : \"\",\n    \"list_variable\" : []\n  };\n  \n  let result = [];\n  let l = [];\n  for (let variable of map) {\n    if(variable.city_name == start){\n      v.y = {\n        \"variable_name\" : variable.city_name,\n        \"value\" : 0,\n        \"route\" : [variable.city_name],\n        \"neighbor_cities\": variable.neighbor_cities\n      }\n      l.push(\n        variable.city_name\n      )\n    }\n    else{\n      v.list_variable.push(\n        {\n          \"variable_name\" : variable.city_name,\n          \"value\" : 91919191919,\n          \"route\" : [],\n          \"neighbor_cities\": variable.neighbor_cities\n        }\n      )\n    }\n    \n    \n  }\n\n  // var index = 1;\n  while(!l.includes(finish)) {\n  // for (let index = 0; index < 3; index++) {\n    // console.log(\"iterasi \" +index  )\n    // index++;\n    for (let variable of v.list_variable) {\n      if( !l.includes(variable.variable_name) && !v.y.route.includes(variable.variable_name)){\n        let w = 91919191919;\n        for(let city of v.y.neighbor_cities){\n          if(city.city_name == variable.variable_name && city.is_active == true){\n            w = city.distance;\n            break;\n          }\n        }\n\n        \n        console.log(\"city = \"+v.y.variable_name+\"->\"+variable.variable_name+\" value : \"+(variable.value))\n\n        // variable.value = Math.min(variable.value,( v.y.value +  w))\n        if( variable.value == 91919191919 && w == 91919191919){\n          \n        }\n        else if(variable.value >=  ( v.y.value +  w)){\n          variable.value = ( v.y.value +  w)\n          variable.route = []\n          for (let node of v.y.route) {\n            variable.route.push(node)\n          }\n          variable.route.push(variable.variable_name)\n          if(variable.route[variable.route.length -1 ]  == finish){\n            let route = \"\";\n            for (let node of variable.route) {\n              route += node+\"-\";\n            }\n            result.push({\n              \"route\" : route.slice(0,-1),\n              \"distance\" : variable.value\n            });\n          \n          }\n          \n        }\n        \n\n        \n      }\n    }\n    v.list_variable = bubbleSort(v.list_variable)\n\n    v.y = v.list_variable[0]\n    l.push(v.list_variable[0].variable_name)\n    v.list_variable.shift()\n    // console.log(v)\n\n    \n  }\n\n  // return v;\n  result = result.reverse()\n  return result;\n  // return [result[0]];\n\n  \n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}