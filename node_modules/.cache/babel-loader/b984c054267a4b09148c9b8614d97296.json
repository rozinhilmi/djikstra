{"ast":null,"code":"export function merge(left, right) {\n  let arr = [];\n\n  while (left.length && right.length) {\n    if (left[0]['distance'] < right[0]['distance']) {\n      arr.push(left.shift());\n    } else {\n      arr.push(right.shift());\n    }\n  }\n\n  return [...arr, ...left, ...right];\n}\nexport function mergeSort(array) {\n  const half = array.length / 2;\n\n  if (array.length < 2) {\n    return array;\n  }\n\n  const left = array.splice(0, half);\n  return merge(mergeSort(left), mergeSort(array));\n}\nexport function quickSort(origArray) {\n  if (origArray.length <= 1) {\n    return origArray;\n  } else {\n    var left = [];\n    var right = [];\n    var newArray = [];\n    var pivot = origArray.pop();\n    var length = origArray.length;\n\n    for (var i = 0; i < length; i++) {\n      if (origArray[i]['distance'] <= pivot) {\n        left.push(origArray[i]);\n      } else {\n        right.push(origArray[i]);\n      }\n    }\n\n    return newArray.concat(quickSort(left), pivot, quickSort(right));\n  }\n}","map":{"version":3,"names":["merge","left","right","arr","length","push","shift","mergeSort","array","half","splice","quickSort","origArray","newArray","pivot","pop","i","concat"],"sources":["/Users/hilmi/Documents/React JS/djikstra/src/controller/mergesort.js"],"sourcesContent":["export function merge(left, right) {\n  let arr = []\n  while (left.length && right.length) {\n      if (left[0]['distance'] < right[0]['distance']) {\n          arr.push(left.shift())  \n      } else {\n          arr.push(right.shift()) \n      }\n  }\n  \n  return [ ...arr, ...left, ...right ]\n}\n\nexport function mergeSort(array) {\n  const half = array.length / 2\n  if(array.length < 2){\n    return array \n  }\n  \n  const left = array.splice(0, half)\n  return merge(mergeSort(left),mergeSort(array))\n}\n\nexport function quickSort(origArray) {\n\tif (origArray.length <= 1) { \n\t\treturn origArray;\n\t} else {\n\n\t\tvar left = [];\n\t\tvar right = [];\n\t\tvar newArray = [];\n\t\tvar pivot = origArray.pop();\n\t\tvar length = origArray.length;\n\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\tif (origArray[i]['distance'] <= pivot) {\n\t\t\t\tleft.push(origArray[i]);\n\t\t\t} else {\n\t\t\t\tright.push(origArray[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn newArray.concat(quickSort(left), pivot, quickSort(right));\n\t}\n}\n"],"mappings":"AAAA,OAAO,SAASA,KAAT,CAAeC,IAAf,EAAqBC,KAArB,EAA4B;EACjC,IAAIC,GAAG,GAAG,EAAV;;EACA,OAAOF,IAAI,CAACG,MAAL,IAAeF,KAAK,CAACE,MAA5B,EAAoC;IAChC,IAAIH,IAAI,CAAC,CAAD,CAAJ,CAAQ,UAAR,IAAsBC,KAAK,CAAC,CAAD,CAAL,CAAS,UAAT,CAA1B,EAAgD;MAC5CC,GAAG,CAACE,IAAJ,CAASJ,IAAI,CAACK,KAAL,EAAT;IACH,CAFD,MAEO;MACHH,GAAG,CAACE,IAAJ,CAASH,KAAK,CAACI,KAAN,EAAT;IACH;EACJ;;EAED,OAAO,CAAE,GAAGH,GAAL,EAAU,GAAGF,IAAb,EAAmB,GAAGC,KAAtB,CAAP;AACD;AAED,OAAO,SAASK,SAAT,CAAmBC,KAAnB,EAA0B;EAC/B,MAAMC,IAAI,GAAGD,KAAK,CAACJ,MAAN,GAAe,CAA5B;;EACA,IAAGI,KAAK,CAACJ,MAAN,GAAe,CAAlB,EAAoB;IAClB,OAAOI,KAAP;EACD;;EAED,MAAMP,IAAI,GAAGO,KAAK,CAACE,MAAN,CAAa,CAAb,EAAgBD,IAAhB,CAAb;EACA,OAAOT,KAAK,CAACO,SAAS,CAACN,IAAD,CAAV,EAAiBM,SAAS,CAACC,KAAD,CAA1B,CAAZ;AACD;AAED,OAAO,SAASG,SAAT,CAAmBC,SAAnB,EAA8B;EACpC,IAAIA,SAAS,CAACR,MAAV,IAAoB,CAAxB,EAA2B;IAC1B,OAAOQ,SAAP;EACA,CAFD,MAEO;IAEN,IAAIX,IAAI,GAAG,EAAX;IACA,IAAIC,KAAK,GAAG,EAAZ;IACA,IAAIW,QAAQ,GAAG,EAAf;IACA,IAAIC,KAAK,GAAGF,SAAS,CAACG,GAAV,EAAZ;IACA,IAAIX,MAAM,GAAGQ,SAAS,CAACR,MAAvB;;IAEA,KAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,MAApB,EAA4BY,CAAC,EAA7B,EAAiC;MAChC,IAAIJ,SAAS,CAACI,CAAD,CAAT,CAAa,UAAb,KAA4BF,KAAhC,EAAuC;QACtCb,IAAI,CAACI,IAAL,CAAUO,SAAS,CAACI,CAAD,CAAnB;MACA,CAFD,MAEO;QACNd,KAAK,CAACG,IAAN,CAAWO,SAAS,CAACI,CAAD,CAApB;MACA;IACD;;IAED,OAAOH,QAAQ,CAACI,MAAT,CAAgBN,SAAS,CAACV,IAAD,CAAzB,EAAiCa,KAAjC,EAAwCH,SAAS,CAACT,KAAD,CAAjD,CAAP;EACA;AACD"},"metadata":{},"sourceType":"module"}