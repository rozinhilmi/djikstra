{"ast":null,"code":"import { maps } from \"./maps\";\nimport { mergeSort } from \"./mergesort\";\nexport function djiskstra(map, start, finish) {\n  console.log(\"djikstra is running\");\n\n  if (start == finish) {\n    return [{\n      \"route\": \"Same City\",\n      \"distance\": 0\n    }];\n  } else {\n    var findingRoute = [];\n    var foundRoute = [];\n\n    for (let node of map) {\n      if (node.startCity === start) {\n        if (node.finishCity === finish) {\n          var route = node.startCity + \"-\" + node.finishCity;\n          foundRoute.push({\n            \"route\": route,\n            \"distance\": node.distance\n          });\n        } else {\n          findingRoute.push({\n            \"route\": node.startCity + \"-\" + node.finishCity,\n            \"distance\": node.distance\n          });\n        }\n      }\n    }\n\n    var index = 0;\n\n    while (findingRoute.length > 0) {\n      // console.log(index)\n      var arrNewNode = [];\n      index++; // console.log(\"iteration \"+index)\n      // console.log(findingRoute)\n\n      for (let node of findingRoute) {\n        var lastNode = \"\";\n\n        for (let i = node.route.length; i > 0; i--) {\n          if (node.route[i] === \"-\") {\n            break;\n          }\n\n          if (node.route[i] !== undefined) {\n            lastNode += node.route[i];\n          }\n        }\n\n        lastNode = lastNode.split(\"\").reverse().join(\"\");\n\n        for (let nodeInMap of map) {\n          if (nodeInMap.startCity === lastNode) {\n            var explodedNode = node.route.split(\"-\");\n\n            if (!explodedNode.includes(nodeInMap.finishCity)) {\n              var newNode = node.route + \"-\" + nodeInMap.finishCity;\n              var newDistance = nodeInMap.distance + node.distance;\n\n              if (nodeInMap.finishCity === finish) {\n                foundRoute.push({\n                  \"route\": newNode,\n                  \"distance\": newDistance\n                });\n\n                if (foundRoute.length > 0) {\n                  var distanceArrayFindingRoute = [];\n\n                  for (let key of findingRoute) {\n                    distanceArrayFindingRoute.push(key.distance);\n                  }\n\n                  var distanceArrayFoundgRoute = [];\n\n                  for (let key of foundRoute) {\n                    distanceArrayFoundgRoute.push(key.distance);\n                  }\n\n                  distanceArrayFindingRoute = distanceArrayFindingRoute.sort();\n                  distanceArrayFoundgRoute = distanceArrayFoundgRoute.sort();\n                  foundRoute = mergeSort(foundRoute);\n                  console.log(distanceArrayFindingRoute[0] + \"---\" + distanceArrayFoundgRoute[0]);\n\n                  if (distanceArrayFoundgRoute[0] <= distanceArrayFindingRoute[0]) {\n                    return foundRoute;\n                  }\n                }\n              } else {\n                arrNewNode.push({\n                  \"route\": newNode,\n                  \"distance\": newDistance\n                });\n              }\n            }\n          }\n        }\n      }\n\n      findingRoute = arrNewNode; // console.log(index,findingRoute.length)\n    }\n  }\n}\nexport function djikstra2(map, start, finish) {\n  return map;\n  var v = [];\n\n  for (let variable of maps) {\n    v.push({\n      \"variable_name\": variable.city_name,\n      \"value\": 99999999,\n      \"route\": []\n    });\n  }\n\n  console.log(v);\n}","map":{"version":3,"names":["maps","mergeSort","djiskstra","map","start","finish","console","log","findingRoute","foundRoute","node","startCity","finishCity","route","push","distance","index","length","arrNewNode","lastNode","i","undefined","split","reverse","join","nodeInMap","explodedNode","includes","newNode","newDistance","distanceArrayFindingRoute","key","distanceArrayFoundgRoute","sort","djikstra2","v","variable","city_name"],"sources":["/Users/hilmi/Documents/React JS/djikstra/src/controller/djikstra.js"],"sourcesContent":["import { maps } from \"./maps\"\nimport {mergeSort} from \"./mergesort\"\n\n\nexport function djiskstra(map,start,finish){\n  console.log(\"djikstra is running\")\n  if(start == finish){\n    return [{\"route\":\"Same City\",\"distance\":0}]\n  }\n  else{\n    \n    var findingRoute = []\n    var foundRoute = []\n\n    for (let node of map) {\n      if(node.startCity === start){\n        if(node.finishCity === finish ){\n          var route = node.startCity+\"-\"+node.finishCity\n          foundRoute.push({\n            \"route\" : route,\n            \"distance\" : node.distance\n          })\n        }\n        else{\n          findingRoute.push({\n            \"route\" : node.startCity+\"-\"+node.finishCity,\n            \"distance\" : node.distance\n          })\n        }\n      }\n    }\n\n    var index = 0\n    while ( findingRoute.length > 0 ) {\n      // console.log(index)\n      \n      var arrNewNode = []\n      index ++\n      // console.log(\"iteration \"+index)\n      // console.log(findingRoute)\n      for (let node of findingRoute) {\n        var lastNode = \"\";\n        for (let i = node.route.length  ; i > 0; i--) {\n          if(node.route[i] === \"-\"){\n            break\n          }\n          if(node.route[i] !== undefined){\n            lastNode += node.route[i]\n          }\n          \n        }\n        lastNode = lastNode.split(\"\").reverse().join(\"\")\n\n        for (let nodeInMap of map) {\n          if(nodeInMap.startCity === lastNode){\n            var explodedNode = node.route.split(\"-\")\n            if( !explodedNode.includes(nodeInMap.finishCity)  ){\n              var newNode = node.route+\"-\"+nodeInMap.finishCity\n              var newDistance = nodeInMap.distance+node.distance\n\n              if(nodeInMap.finishCity === finish){\n                foundRoute.push({\n                  \"route\" : newNode,\n                  \"distance\" : newDistance\n                })\n                if(foundRoute.length > 0){\n                  var distanceArrayFindingRoute = []\n                  for (let key of findingRoute) {\n                    distanceArrayFindingRoute.push(key.distance)\n                  }\n                  var distanceArrayFoundgRoute = []\n                  for (let key of foundRoute) {\n                    distanceArrayFoundgRoute.push(key.distance)\n                  }\n                  distanceArrayFindingRoute = distanceArrayFindingRoute.sort()\n                  distanceArrayFoundgRoute = distanceArrayFoundgRoute.sort()\n                  foundRoute = mergeSort(foundRoute)\n\n                  console.log(distanceArrayFindingRoute[0]+\"---\"+distanceArrayFoundgRoute[0])\n\n                  if(distanceArrayFoundgRoute[0] <= distanceArrayFindingRoute[0]){\n                    \n                    return foundRoute;\n                  }\n                }\n              }\n              else{\n                arrNewNode.push({\n                  \"route\" : newNode,\n                  \"distance\" : newDistance\n                })\n              }\n            }\n          }\n        }\n      }\n      findingRoute = arrNewNode\n      // console.log(index,findingRoute.length)\n    }\n  }\n}\n\n\n\nexport function djikstra2(map,start,finish){\n  return map;\n  var v = [];\n  for (let variable of maps) {\n    v.push(\n      {\n        \"variable_name\" : variable.city_name,\n        \"value\" : 99999999,\n        \"route\" : []\n      }\n    )\n    \n  }\n  console.log(v)\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}