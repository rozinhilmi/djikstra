{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/hilmi/Documents/React JS/djikstra/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import{mergeSort}from\"./mergesort\";import{quickSort}from\"./mergesort\";export function djiskstra(map,start,finish){console.log(\"djikstra is running\");if(start==finish){return[{\"route\":\"Same City\",\"distance\":0}];}else{var findingRoute=[];var foundRoute=[];var _iterator=_createForOfIteratorHelper(map),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var _node=_step.value;if(_node.startCity===start){if(_node.finishCity===finish){var route=_node.startCity+\"-\"+_node.finishCity;foundRoute.push({\"route\":route,\"distance\":_node.distance});}else{findingRoute.push({\"route\":_node.startCity+\"-\"+_node.finishCity,\"distance\":_node.distance});}}}}catch(err){_iterator.e(err);}finally{_iterator.f();}var index=0;while(findingRoute.length>0){// console.log(index)\nvar arrNewNode=[];index++;console.log(\"iteration \"+index);console.log(findingRoute);var _iterator2=_createForOfIteratorHelper(findingRoute),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var node=_step2.value;var lastNode=\"\";for(var i=node.route.length;i>0;i--){if(node.route[i]===\"-\"){break;}if(node.route[i]!==undefined){lastNode+=node.route[i];}}lastNode=lastNode.split(\"\").reverse().join(\"\");var _iterator3=_createForOfIteratorHelper(map),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var nodeInMap=_step3.value;if(nodeInMap.startCity===lastNode){var explodedNode=node.route.split(\"-\");if(!explodedNode.includes(nodeInMap.finishCity)){var newNode=node.route+\"-\"+nodeInMap.finishCity;var newDistance=nodeInMap.distance+node.distance;if(nodeInMap.finishCity===finish){foundRoute.push({\"route\":newNode,\"distance\":newDistance});if(foundRoute.length>0){var distanceArrayFindingRoute=[];var _iterator4=_createForOfIteratorHelper(findingRoute),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var key=_step4.value;distanceArrayFindingRoute.push(key.distance);}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}var distanceArrayFoundgRoute=[];var _iterator5=_createForOfIteratorHelper(foundRoute),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var _key=_step5.value;distanceArrayFoundgRoute.push(_key.distance);}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}distanceArrayFindingRoute=distanceArrayFindingRoute.sort();distanceArrayFoundgRoute=distanceArrayFoundgRoute.sort();foundRoute=mergeSort(foundRoute);if(distanceArrayFoundgRoute[0]<distanceArrayFindingRoute[0]){console.log(distanceArrayFindingRoute);console.log(\"-----\");console.log(distanceArrayFoundgRoute);return foundRoute;}}}else{arrNewNode.push({\"route\":newNode,\"distance\":newDistance});}}}}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}findingRoute=arrNewNode;// console.log(index,findingRoute.length)\n}}}export function djikstra2(map,start,finish){var iterationTable=[0];for(var i=1;i<map.length;i++){iterationTable.push(\"no route\");}console.log(iterationTable);}","map":{"version":3,"names":["mergeSort","quickSort","djiskstra","map","start","finish","console","log","findingRoute","foundRoute","node","startCity","finishCity","route","push","distance","index","length","arrNewNode","lastNode","i","undefined","split","reverse","join","nodeInMap","explodedNode","includes","newNode","newDistance","distanceArrayFindingRoute","key","distanceArrayFoundgRoute","sort","djikstra2","iterationTable"],"sources":["/Users/hilmi/Documents/React JS/djikstra/src/controller/djikstra.js"],"sourcesContent":["import {mergeSort} from \"./mergesort\"\nimport { quickSort } from \"./mergesort\"\n\n\nexport function djiskstra(map,start,finish){\n  console.log(\"djikstra is running\")\n  if(start == finish){\n    return [{\"route\":\"Same City\",\"distance\":0}]\n  }\n  else{\n    \n    var findingRoute = []\n    var foundRoute = []\n\n    for (let node of map) {\n      if(node.startCity === start){\n        if(node.finishCity === finish ){\n          var route = node.startCity+\"-\"+node.finishCity\n          foundRoute.push({\n            \"route\" : route,\n            \"distance\" : node.distance\n          })\n        }\n        else{\n          findingRoute.push({\n            \"route\" : node.startCity+\"-\"+node.finishCity,\n            \"distance\" : node.distance\n          })\n        }\n      }\n    }\n\n    var index = 0\n    while ( findingRoute.length > 0 ) {\n      // console.log(index)\n      \n      var arrNewNode = []\n      index ++\n      console.log(\"iteration \"+index)\n      console.log(findingRoute)\n      for (let node of findingRoute) {\n        var lastNode = \"\";\n        for (let i = node.route.length  ; i > 0; i--) {\n          if(node.route[i] === \"-\"){\n            break\n          }\n          if(node.route[i] !== undefined){\n            lastNode += node.route[i]\n          }\n          \n        }\n        lastNode = lastNode.split(\"\").reverse().join(\"\")\n\n        for (let nodeInMap of map) {\n          if(nodeInMap.startCity === lastNode){\n            var explodedNode = node.route.split(\"-\")\n            if( !explodedNode.includes(nodeInMap.finishCity)  ){\n              var newNode = node.route+\"-\"+nodeInMap.finishCity\n              var newDistance = nodeInMap.distance+node.distance\n\n              if(nodeInMap.finishCity === finish){\n                foundRoute.push({\n                  \"route\" : newNode,\n                  \"distance\" : newDistance\n                })\n                if(foundRoute.length > 0){\n                  var distanceArrayFindingRoute = []\n                  for (let key of findingRoute) {\n                    distanceArrayFindingRoute.push(key.distance)\n                  }\n                  var distanceArrayFoundgRoute = []\n                  for (let key of foundRoute) {\n                    distanceArrayFoundgRoute.push(key.distance)\n                  }\n                  distanceArrayFindingRoute = distanceArrayFindingRoute.sort()\n                  distanceArrayFoundgRoute = distanceArrayFoundgRoute.sort()\n                  foundRoute = mergeSort(foundRoute)\n\n                  if(distanceArrayFoundgRoute[0] < distanceArrayFindingRoute[0]){\n                    console.log(distanceArrayFindingRoute)\n                    console.log(\"-----\")\n                    console.log(distanceArrayFoundgRoute)\n                    return foundRoute;\n                  }\n                }\n              }\n              else{\n                arrNewNode.push({\n                  \"route\" : newNode,\n                  \"distance\" : newDistance\n                })\n              }\n            }\n          }\n        }\n      }\n      findingRoute = arrNewNode\n      // console.log(index,findingRoute.length)\n    }\n  }\n}\n\n\n\nexport function djikstra2(map,start,finish){\n  let iterationTable = [0]\n  for (let i=1;i<map.length;i++) {\n    iterationTable.push(\"no route\")\n  }\n  console.log(iterationTable);\n}"],"mappings":"sJAAA,OAAQA,SAAR,KAAwB,aAAxB,CACA,OAASC,SAAT,KAA0B,aAA1B,CAGA,MAAO,SAASC,UAAT,CAAmBC,GAAnB,CAAuBC,KAAvB,CAA6BC,MAA7B,CAAoC,CACzCC,OAAO,CAACC,GAAR,CAAY,qBAAZ,EACA,GAAGH,KAAK,EAAIC,MAAZ,CAAmB,CACjB,MAAO,CAAC,CAAC,QAAQ,WAAT,CAAqB,WAAW,CAAhC,CAAD,CAAP,CACD,CAFD,IAGI,CAEF,GAAIG,aAAY,CAAG,EAAnB,CACA,GAAIC,WAAU,CAAG,EAAjB,CAHE,yCAKeN,GALf,YAKF,+CAAsB,IAAbO,MAAa,aACpB,GAAGA,KAAI,CAACC,SAAL,GAAmBP,KAAtB,CAA4B,CAC1B,GAAGM,KAAI,CAACE,UAAL,GAAoBP,MAAvB,CAA+B,CAC7B,GAAIQ,MAAK,CAAGH,KAAI,CAACC,SAAL,CAAe,GAAf,CAAmBD,KAAI,CAACE,UAApC,CACAH,UAAU,CAACK,IAAX,CAAgB,CACd,QAAUD,KADI,CAEd,WAAaH,KAAI,CAACK,QAFJ,CAAhB,EAID,CAND,IAOI,CACFP,YAAY,CAACM,IAAb,CAAkB,CAChB,QAAUJ,KAAI,CAACC,SAAL,CAAe,GAAf,CAAmBD,KAAI,CAACE,UADlB,CAEhB,WAAaF,KAAI,CAACK,QAFF,CAAlB,EAID,CACF,CACF,CArBC,qDAuBF,GAAIC,MAAK,CAAG,CAAZ,CACA,MAAQR,YAAY,CAACS,MAAb,CAAsB,CAA9B,CAAkC,CAChC;AAEA,GAAIC,WAAU,CAAG,EAAjB,CACAF,KAAK,GACLV,OAAO,CAACC,GAAR,CAAY,aAAaS,KAAzB,EACAV,OAAO,CAACC,GAAR,CAAYC,YAAZ,EANgC,0CAOfA,YAPe,aAOhC,kDAA+B,IAAtBE,KAAsB,cAC7B,GAAIS,SAAQ,CAAG,EAAf,CACA,IAAK,GAAIC,EAAC,CAAGV,IAAI,CAACG,KAAL,CAAWI,MAAxB,CAAkCG,CAAC,CAAG,CAAtC,CAAyCA,CAAC,EAA1C,CAA8C,CAC5C,GAAGV,IAAI,CAACG,KAAL,CAAWO,CAAX,IAAkB,GAArB,CAAyB,CACvB,MACD,CACD,GAAGV,IAAI,CAACG,KAAL,CAAWO,CAAX,IAAkBC,SAArB,CAA+B,CAC7BF,QAAQ,EAAIT,IAAI,CAACG,KAAL,CAAWO,CAAX,CAAZ,CACD,CAEF,CACDD,QAAQ,CAAGA,QAAQ,CAACG,KAAT,CAAe,EAAf,EAAmBC,OAAnB,GAA6BC,IAA7B,CAAkC,EAAlC,CAAX,CAX6B,0CAaPrB,GAbO,aAa7B,kDAA2B,IAAlBsB,UAAkB,cACzB,GAAGA,SAAS,CAACd,SAAV,GAAwBQ,QAA3B,CAAoC,CAClC,GAAIO,aAAY,CAAGhB,IAAI,CAACG,KAAL,CAAWS,KAAX,CAAiB,GAAjB,CAAnB,CACA,GAAI,CAACI,YAAY,CAACC,QAAb,CAAsBF,SAAS,CAACb,UAAhC,CAAL,CAAmD,CACjD,GAAIgB,QAAO,CAAGlB,IAAI,CAACG,KAAL,CAAW,GAAX,CAAeY,SAAS,CAACb,UAAvC,CACA,GAAIiB,YAAW,CAAGJ,SAAS,CAACV,QAAV,CAAmBL,IAAI,CAACK,QAA1C,CAEA,GAAGU,SAAS,CAACb,UAAV,GAAyBP,MAA5B,CAAmC,CACjCI,UAAU,CAACK,IAAX,CAAgB,CACd,QAAUc,OADI,CAEd,WAAaC,WAFC,CAAhB,EAIA,GAAGpB,UAAU,CAACQ,MAAX,CAAoB,CAAvB,CAAyB,CACvB,GAAIa,0BAAyB,CAAG,EAAhC,CADuB,0CAEPtB,YAFO,aAEvB,kDAA8B,IAArBuB,IAAqB,cAC5BD,yBAAyB,CAAChB,IAA1B,CAA+BiB,GAAG,CAAChB,QAAnC,EACD,CAJsB,uDAKvB,GAAIiB,yBAAwB,CAAG,EAA/B,CALuB,0CAMPvB,UANO,aAMvB,kDAA4B,IAAnBsB,KAAmB,cAC1BC,wBAAwB,CAAClB,IAAzB,CAA8BiB,IAAG,CAAChB,QAAlC,EACD,CARsB,uDASvBe,yBAAyB,CAAGA,yBAAyB,CAACG,IAA1B,EAA5B,CACAD,wBAAwB,CAAGA,wBAAwB,CAACC,IAAzB,EAA3B,CACAxB,UAAU,CAAGT,SAAS,CAACS,UAAD,CAAtB,CAEA,GAAGuB,wBAAwB,CAAC,CAAD,CAAxB,CAA8BF,yBAAyB,CAAC,CAAD,CAA1D,CAA8D,CAC5DxB,OAAO,CAACC,GAAR,CAAYuB,yBAAZ,EACAxB,OAAO,CAACC,GAAR,CAAY,OAAZ,EACAD,OAAO,CAACC,GAAR,CAAYyB,wBAAZ,EACA,MAAOvB,WAAP,CACD,CACF,CACF,CAzBD,IA0BI,CACFS,UAAU,CAACJ,IAAX,CAAgB,CACd,QAAUc,OADI,CAEd,WAAaC,WAFC,CAAhB,EAID,CACF,CACF,CACF,CAtD4B,uDAuD9B,CA9D+B,uDA+DhCrB,YAAY,CAAGU,UAAf,CACA;AACD,CACF,CACF,CAID,MAAO,SAASgB,UAAT,CAAmB/B,GAAnB,CAAuBC,KAAvB,CAA6BC,MAA7B,CAAoC,CACzC,GAAI8B,eAAc,CAAG,CAAC,CAAD,CAArB,CACA,IAAK,GAAIf,EAAC,CAAC,CAAX,CAAaA,CAAC,CAACjB,GAAG,CAACc,MAAnB,CAA0BG,CAAC,EAA3B,CAA+B,CAC7Be,cAAc,CAACrB,IAAf,CAAoB,UAApB,EACD,CACDR,OAAO,CAACC,GAAR,CAAY4B,cAAZ,EACD"},"metadata":{},"sourceType":"module"}