{"ast":null,"code":"export function bubbleSort(arr){var i,j;var len=arr.length;var isSwapped=false;for(var _i=0;_i<len;_i++){isSwapped=false;for(var _j=0;_j<len;_j++){try{if(arr[_j].value>arr[_j+1].value){var temp=arr[_j];arr[_j]=arr[_j+1];arr[_j+1]=temp;isSwapped=true;}}catch(error){}}// IF no two elements were swapped by inner loop, then break\nif(!isSwapped){break;}}// Print the array\nreturn arr;}","map":{"version":3,"names":["bubbleSort","arr","i","j","len","length","isSwapped","value","temp","error"],"sources":["/Users/hilmi/Documents/React JS/djikstra/src/controller/mergesort.js"],"sourcesContent":["export function bubbleSort(arr){\n   \n  var i, j;\n  var len = arr.length;\n   \n  var isSwapped = false;\n   \n  for(let i =0; i < len; i++){\n     \n    isSwapped = false;\n     \n    for(let j = 0; j < len; j++){\n      try {\n        if(arr[j].value > arr[j + 1].value){\n          var temp = arr[j]\n          arr[j] = arr[j+1];\n          arr[j+1] = temp;\n          isSwapped = true;\n        }\n      } catch (error) {\n        \n      }\n        \n    }\n     \n    // IF no two elements were swapped by inner loop, then break\n     \n    if(!isSwapped){\n      break;\n    }\n  }\n   \n  // Print the array\n  return (arr)\n}"],"mappings":"AAAA,MAAO,SAASA,WAAT,CAAoBC,GAApB,CAAwB,CAE7B,GAAIC,EAAJ,CAAOC,CAAP,CACA,GAAIC,IAAG,CAAGH,GAAG,CAACI,MAAd,CAEA,GAAIC,UAAS,CAAG,KAAhB,CAEA,IAAI,GAAIJ,GAAC,CAAE,CAAX,CAAcA,EAAC,CAAGE,GAAlB,CAAuBF,EAAC,EAAxB,CAA2B,CAEzBI,SAAS,CAAG,KAAZ,CAEA,IAAI,GAAIH,GAAC,CAAG,CAAZ,CAAeA,EAAC,CAAGC,GAAnB,CAAwBD,EAAC,EAAzB,CAA4B,CAC1B,GAAI,CACF,GAAGF,GAAG,CAACE,EAAD,CAAH,CAAOI,KAAP,CAAeN,GAAG,CAACE,EAAC,CAAG,CAAL,CAAH,CAAWI,KAA7B,CAAmC,CACjC,GAAIC,KAAI,CAAGP,GAAG,CAACE,EAAD,CAAd,CACAF,GAAG,CAACE,EAAD,CAAH,CAASF,GAAG,CAACE,EAAC,CAAC,CAAH,CAAZ,CACAF,GAAG,CAACE,EAAC,CAAC,CAAH,CAAH,CAAWK,IAAX,CACAF,SAAS,CAAG,IAAZ,CACD,CACF,CAAC,MAAOG,KAAP,CAAc,CAEf,CAEF,CAED;AAEA,GAAG,CAACH,SAAJ,CAAc,CACZ,MACD,CACF,CAED;AACA,MAAQL,IAAR,CACD"},"metadata":{},"sourceType":"module"}