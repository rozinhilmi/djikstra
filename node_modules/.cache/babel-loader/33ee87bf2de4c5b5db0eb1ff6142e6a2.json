{"ast":null,"code":"function merge(left, right) {\n  let arr = [];\n\n  while (left.length && right.length) {\n    if (left[0]['distance'] < right[0]['distance']) {\n      arr.push(left.shift());\n    } else {\n      arr.push(right.shift());\n    }\n  }\n\n  return [...arr, ...left, ...right];\n}\n\nfunction mergeSort(array) {\n  const half = array.length / 2;\n\n  if (array.length < 2) {\n    return array;\n  }\n\n  const left = array.splice(0, half);\n  return merge(mergeSort(left), mergeSort(array));\n}","map":{"version":3,"names":["merge","left","right","arr","length","push","shift","mergeSort","array","half","splice"],"sources":["/Users/hilmi/Documents/React JS/djikstra/src/controller/mergesort.js"],"sourcesContent":["function merge(left, right) {\n  let arr = []\n  while (left.length && right.length) {\n      if (left[0]['distance'] < right[0]['distance']) {\n          arr.push(left.shift())  \n      } else {\n          arr.push(right.shift()) \n      }\n  }\n  \n  return [ ...arr, ...left, ...right ]\n}\n\nfunction mergeSort(array) {\n  const half = array.length / 2\n  if(array.length < 2){\n    return array \n  }\n  \n  const left = array.splice(0, half)\n  return merge(mergeSort(left),mergeSort(array))\n}"],"mappings":"AAAA,SAASA,KAAT,CAAeC,IAAf,EAAqBC,KAArB,EAA4B;EAC1B,IAAIC,GAAG,GAAG,EAAV;;EACA,OAAOF,IAAI,CAACG,MAAL,IAAeF,KAAK,CAACE,MAA5B,EAAoC;IAChC,IAAIH,IAAI,CAAC,CAAD,CAAJ,CAAQ,UAAR,IAAsBC,KAAK,CAAC,CAAD,CAAL,CAAS,UAAT,CAA1B,EAAgD;MAC5CC,GAAG,CAACE,IAAJ,CAASJ,IAAI,CAACK,KAAL,EAAT;IACH,CAFD,MAEO;MACHH,GAAG,CAACE,IAAJ,CAASH,KAAK,CAACI,KAAN,EAAT;IACH;EACJ;;EAED,OAAO,CAAE,GAAGH,GAAL,EAAU,GAAGF,IAAb,EAAmB,GAAGC,KAAtB,CAAP;AACD;;AAED,SAASK,SAAT,CAAmBC,KAAnB,EAA0B;EACxB,MAAMC,IAAI,GAAGD,KAAK,CAACJ,MAAN,GAAe,CAA5B;;EACA,IAAGI,KAAK,CAACJ,MAAN,GAAe,CAAlB,EAAoB;IAClB,OAAOI,KAAP;EACD;;EAED,MAAMP,IAAI,GAAGO,KAAK,CAACE,MAAN,CAAa,CAAb,EAAgBD,IAAhB,CAAb;EACA,OAAOT,KAAK,CAACO,SAAS,CAACN,IAAD,CAAV,EAAiBM,SAAS,CAACC,KAAD,CAA1B,CAAZ;AACD"},"metadata":{},"sourceType":"module"}